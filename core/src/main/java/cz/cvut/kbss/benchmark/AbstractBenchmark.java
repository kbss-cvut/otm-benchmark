package cz.cvut.kbss.benchmark;

import cz.cvut.kbss.benchmark.util.Constants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;

/**
 * Primary entry point for the performance benchmark application.
 * <p>
 * Defines the supported operations and the CLI interface.
 * <p>
 * Subclasses need to provide an implementation which creates a {@link BenchmarkRunner} instance to execute.
 * <p>
 * The implementation will mostly likely be a subclass of {@link AbstractRunner}.
 */
public abstract class AbstractBenchmark {

    protected static final Logger LOG = LoggerFactory.getLogger(AbstractBenchmark.class);

    protected static final String CREATE = "create";
    protected static final String BATCH_CREATE = "create-batch";
    protected static final String RETRIEVE = "retrieve";
    protected static final String RETRIEVE_ALL = "retrieve-all";
    protected static final String UPDATE = "update";
    protected static final String DELETE = "delete";

    protected void run(String[] args) {
        if (args.length < 1) {
            printHelp();
        }
        registerAdditionalParameters();
        final String type = args[args.length - 1];
        BenchmarkRunner runner = null;
        try {
            runner = createBenchmarkRunner(type);
        } catch (IllegalArgumentException e) {
            LOG.error("Unable to create benchmark runner.", e);
            printHelp();
            System.exit(1);
        }
        final Benchmark benchmark = new Benchmark(runner, args);
        benchmark.execute();
    }

    protected abstract BenchmarkRunner createBenchmarkRunner(String type);

    /**
     * The factor parameter is used to scale the size of the data set generated by the {@link cz.cvut.kbss.benchmark.data.DataGenerator}.
     */
    private static void registerAdditionalParameters() {
        Configuration.registerOption(Constants.FACTOR_PARAMETER,
                "Scale factor. Determines the size of the generated dataset.", Integer.class, 1);
        Configuration.registerOption(Constants.MEMORY_PARAMETER,
                "Memory tracking (jstat) output file. If not present, memory usage will not be tracked.", String.class,
                "");
    }

    private static void printHelp() {
        System.out.println("Usage:");
        System.out.println("[execution-configuration] (" + String
                .join("|", Arrays.asList(CREATE, BATCH_CREATE, RETRIEVE, RETRIEVE_ALL, UPDATE, DELETE)) + ')');
        System.out.println("execution-configuration: ");
        Configuration.printHelp();
    }
}
